package net.jeemi.ri.tool.service;

import static java.lang.String.format;
import static java.util.Arrays.stream;
import static java.util.Objects.requireNonNull;
import static java.util.stream.Stream.concat;
import static java.util.stream.Stream.of;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.io.Writer;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Properties;
import java.util.Random;
import java.util.concurrent.ExecutionException;

import net.jeemi.ri.tool.service.admin.AdminCommand;
import net.jeemi.ri.tool.service.admin.AdminCommandContext;
import net.jeemi.ri.tool.util.SharedBundle;
import net.jeemi.ri.tool.util.Unzipper;

public class InfrastructureServiceManager
{
	private static final String CURRENT_VERSION = "0.1";
	private static final String[] SUPPORTED_VERSIONS = {};
	
	private static final int UNZIPPER_BUFFER_SIZE = 8 * 1024;
	
	private static final String GLASSFISH_V5_INSTALLER_SOURCE_STR =
		"http://download.oracle.com/glassfish/5.0/" +
		"release/glassfish-5.0.zip";
	private static final int GLASSFISH_V5_INSTALLER_SOURCE_SIZE = 2000;

	private static final String VERSION_PROPERTY_NAME = "version";
	
	private final Unzipper unzipper;
	private final File workingDir;
	private final File serverDir;
	private final File propertiesFile;
	
	public InfrastructureServiceManager(File workingDir)
	{
		unzipper = new Unzipper(UNZIPPER_BUFFER_SIZE);
		this.workingDir = requireNonNull(workingDir);
		serverDir = new File(this.workingDir, "server");
		serverDir.mkdirs();
		propertiesFile = new File(this.workingDir, "jeemi-service.properties");
	}
	
	public void prepare(InfrastructureServiceSettings settings)
	throws InfrastructureServiceManagerException
	{
		try
		{
			workingDir.mkdirs();
			
			Properties properties = new Properties();
			properties.setProperty(VERSION_PROPERTY_NAME, CURRENT_VERSION);
			storeProperties(properties);
			
			unzipper.unzip(
				SharedBundle.builder()
					.withName("glassfish-v5-installer")
					.withSource(parseURI(GLASSFISH_V5_INSTALLER_SOURCE_STR))
					.build()
					.open(),
				serverDir,
				GLASSFISH_V5_INSTALLER_SOURCE_SIZE);
			
			AdminCommandContext context = AdminCommandContext.builder()
				.withRandom(new Random())
				.withBinDir(new File(new File(serverDir, "glassfish5"), "bin"))
				.build();
			AdminCommand.deleteDomain()
				.withDomainName("domain1")
				.build()
				.execute(context)
				.get();
		}
		catch (IOException | ExecutionException | InterruptedException exception)
		{
			throw new InfrastructureServiceManagerException(exception);
		}
	}

	public InfrastructureService restore()
	throws InfrastructureServiceManagerException
	{
		try
		{
			Properties properties = loadProperties();
			
			String version = properties.getProperty(VERSION_PROPERTY_NAME);
			concat(
				of(CURRENT_VERSION),
				stream(SUPPORTED_VERSIONS, 0, SUPPORTED_VERSIONS.length))
				.filter(version::equals)
				.findAny()
				.orElseThrow(() -> new InfrastructureServiceManagerException(
					format("Unsupported version %s", version)));
			
			return new InfrastructureService(serverDir);
		}
		catch (IOException exception)
		{
			throw new InfrastructureServiceManagerException(exception);
		}
	}
	
	Properties loadProperties()
	throws IOException
	{
		try (Reader reader = new FileReader(propertiesFile))
		{
			Properties properties = new Properties();
			properties.load(reader);
			return properties;
		}
	}
	
	void storeProperties(Properties properties)
	throws IOException
	{
		try (Writer writer = new FileWriter(propertiesFile))
		{
			properties.store(writer, "File generated by JEEMI Tool");
		}
	}
	
	URI parseURI(String str)
	{
		try
		{
			return new URI(str);
		}
		catch (URISyntaxException exception)
		{
			throw new IllegalArgumentException(exception);
		}
	}
}
